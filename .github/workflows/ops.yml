name: DevCommandHub Ops
on:
  workflow_dispatch:
    inputs:
      job_id: { description: "DCH Job ID", required: true }
      action: { description: "deploy|rollback|scale|restart|logs|status", required: true }
      service: { description: "service name", required: false }
      environment: { description: "dev|staging|prod", required: false }
      replicas: { description: "int", required: false }
      user_id: { description: "User ID", required: false }
      original_command: { description: "Original command", required: false }

run-name: DCH ${{ inputs.job_id }} - ${{ inputs.action }} ${{ inputs.service }} @ ${{ inputs.environment }}

jobs:
  ops:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display job information
        run: |
          echo "🚀 DevCommandHub Job Execution"
          echo "================================"
          echo "Job ID: ${{ inputs.job_id }}"
          echo "Action: ${{ inputs.action }}"
          echo "Service: ${{ inputs.service }}"
          echo "Environment: ${{ inputs.environment }}"
          echo "Replicas: ${{ inputs.replicas }}"
          echo "User: ${{ inputs.user_id }}"
          echo "Original Command: ${{ inputs.original_command }}"
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "================================"

      - name: Validate inputs
        run: |
          case "${{ inputs.action }}" in
            deploy|rollback|restart|logs)
              if [ -z "${{ inputs.service }}" ]; then
                echo "❌ Error: Service name is required for ${{ inputs.action }} action"
                exit 1
              fi
              ;;
            scale)
              if [ -z "${{ inputs.service }}" ] || [ -z "${{ inputs.replicas }}" ]; then
                echo "❌ Error: Service name and replicas are required for scale action"
                exit 1
              fi
              ;;
            status)
              echo "✅ Status check - service name is optional"
              ;;
            *)
              echo "❌ Error: Unknown action '${{ inputs.action }}'"
              echo "Supported actions: deploy, rollback, scale, restart, logs, status"
              exit 1
              ;;
          esac
          echo "✅ Input validation passed"

      # ===== DEPLOY ACTION =====
      - name: Deploy service
        if: inputs.action == 'deploy'
        run: |
          echo "🚀 Deploying ${{ inputs.service }} to ${{ inputs.environment }} environment"
          
          # Check if service directory exists
          if [ ! -d "services/${{ inputs.service }}" ]; then
            echo "❌ Service directory 'services/${{ inputs.service }}' not found"
            echo "Available services:"
            ls -la services/ 2>/dev/null || echo "No services directory found"
            exit 1
          fi
          
          echo "📁 Service directory found: services/${{ inputs.service }}"
          
          # Check for deployment script
          if [ -f "services/${{ inputs.service }}/deploy.sh" ]; then
            echo "📋 Running custom deployment script..."
            chmod +x "services/${{ inputs.service }}/deploy.sh"
            cd "services/${{ inputs.service }}"
            ./deploy.sh "${{ inputs.environment }}" "${{ github.sha }}"
          elif [ -f "scripts/deploy.sh" ]; then
            echo "📋 Running global deployment script..."
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh "${{ inputs.service }}" "${{ inputs.environment }}" "${{ github.sha }}"
          else
            echo "📦 Performing standard deployment steps..."
            
            # Build step (if applicable)
            if [ -f "services/${{ inputs.service }}/package.json" ]; then
              echo "📦 Installing Node.js dependencies..."
              cd "services/${{ inputs.service }}"
              npm ci
              
              if npm run build --if-present; then
                echo "✅ Build completed successfully"
              else
                echo "⚠️ Build failed or no build script found"
              fi
              cd ../..
            fi
            
            # Docker build (if Dockerfile exists)
            if [ -f "services/${{ inputs.service }}/Dockerfile" ]; then
              echo "🐳 Building Docker image..."
              docker build -t "${{ inputs.service }}:${{ github.sha }}" "services/${{ inputs.service }}"
              echo "✅ Docker image built: ${{ inputs.service }}:${{ github.sha }}"
            fi
            
            echo "📤 Deployment simulation completed"
          fi
          
          echo "✅ Deployment of ${{ inputs.service }} to ${{ inputs.environment }} completed successfully!"

      # ===== ROLLBACK ACTION =====
      - name: Rollback service
        if: inputs.action == 'rollback'
        run: |
          echo "⏪ Rolling back ${{ inputs.service }} in ${{ inputs.environment }} environment"
          
          # Check for custom rollback script
          if [ -f "services/${{ inputs.service }}/rollback.sh" ]; then
            echo "📋 Running custom rollback script..."
            chmod +x "services/${{ inputs.service }}/rollback.sh"
            cd "services/${{ inputs.service }}"
            ./rollback.sh "${{ inputs.environment }}"
          elif [ -f "scripts/rollback.sh" ]; then
            echo "📋 Running global rollback script..."
            chmod +x scripts/rollback.sh
            ./scripts/rollback.sh "${{ inputs.service }}" "${{ inputs.environment }}"
          else
            echo "📋 Performing standard rollback..."
            
            # Get previous successful deployment
            echo "🔍 Finding previous successful deployment..."
            
            # Use GitHub API to find previous successful workflow run
            PREVIOUS_SHA=$(gh api repos/${{ github.repository }}/actions/runs \
              --jq '.workflow_runs[] | select(.conclusion=="success" and .head_sha!="${{ github.sha }}") | .head_sha' \
              --limit 1 2>/dev/null || echo "")
            
            if [ -n "$PREVIOUS_SHA" ]; then
              echo "📍 Rolling back to commit: $PREVIOUS_SHA"
              git checkout $PREVIOUS_SHA -- "services/${{ inputs.service }}" || echo "⚠️ Could not checkout previous version"
            else
              echo "⚠️ No previous successful deployment found, performing symbolic rollback"
            fi
          fi
          
          echo "✅ Rollback of ${{ inputs.service }} completed successfully!"

      # ===== SCALE ACTION =====
      - name: Scale service
        if: inputs.action == 'scale'
        run: |
          echo "📊 Scaling ${{ inputs.service }} to ${{ inputs.replicas }} replicas in ${{ inputs.environment }} environment"
          
          # Check for custom scaling script
          if [ -f "services/${{ inputs.service }}/scale.sh" ]; then
            echo "📋 Running custom scaling script..."
            chmod +x "services/${{ inputs.service }}/scale.sh"
            cd "services/${{ inputs.service }}"
            ./scale.sh "${{ inputs.environment }}" "${{ inputs.replicas }}"
          elif [ -f "scripts/scale.sh" ]; then
            echo "📋 Running global scaling script..."
            chmod +x scripts/scale.sh
            ./scripts/scale.sh "${{ inputs.service }}" "${{ inputs.environment }}" "${{ inputs.replicas }}"
          else
            echo "📋 Performing scaling operation..."
            echo "Current configuration:"
            echo "  Service: ${{ inputs.service }}"
            echo "  Environment: ${{ inputs.environment }}"
            echo "  Target replicas: ${{ inputs.replicas }}"
            
            # Update configuration file if it exists
            CONFIG_FILE="services/${{ inputs.service }}/config/${{ inputs.environment }}.json"
            if [ -f "$CONFIG_FILE" ]; then
              echo "📝 Updating configuration file: $CONFIG_FILE"
              # Use jq to update replicas if available, otherwise sed
              if command -v jq >/dev/null 2>&1; then
                jq ".replicas = ${{ inputs.replicas }}" "$CONFIG_FILE" > "${CONFIG_FILE}.tmp"
                mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
              else
                sed -i 's/"replicas":[[:space:]]*[0-9]*/"replicas": ${{ inputs.replicas }}/g' "$CONFIG_FILE"
              fi
              echo "✅ Configuration updated"
            fi
          fi
          
          echo "✅ Scaling of ${{ inputs.service }} to ${{ inputs.replicas }} replicas completed successfully!"

      # ===== RESTART ACTION =====
      - name: Restart service
        if: inputs.action == 'restart'
        run: |
          echo "🔄 Restarting ${{ inputs.service }} in ${{ inputs.environment }} environment"
          
          # Check for custom restart script
          if [ -f "services/${{ inputs.service }}/restart.sh" ]; then
            echo "📋 Running custom restart script..."
            chmod +x "services/${{ inputs.service }}/restart.sh"
            cd "services/${{ inputs.service }}"
            ./restart.sh "${{ inputs.environment }}"
          elif [ -f "scripts/restart.sh" ]; then
            echo "📋 Running global restart script..."
            chmod +x scripts/restart.sh
            ./scripts/restart.sh "${{ inputs.service }}" "${{ inputs.environment }}"
          else
            echo "📋 Performing restart operation..."
            
            # Create restart marker file
            RESTART_FILE="services/${{ inputs.service }}/.restart_$(date +%s)"
            echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) - Restart requested by ${{ inputs.user_id }}" > "$RESTART_FILE"
            
            echo "🏷️ Restart marker created: $RESTART_FILE"
            
            # If it's a Node.js service, we could restart the process
            if [ -f "services/${{ inputs.service }}/package.json" ]; then
              echo "🔧 Node.js service detected"
              cd "services/${{ inputs.service }}"
              # Simulate restart by killing and restarting (in real scenario)
              echo "Process restart simulation completed"
              cd ../..
            fi
          fi
          
          echo "✅ Restart of ${{ inputs.service }} completed successfully!"

      # ===== LOGS ACTION =====
      - name: Fetch service logs
        if: inputs.action == 'logs'
        run: |
          echo "📋 Fetching logs for ${{ inputs.service }} in ${{ inputs.environment }} environment"
          
          # Check for custom logs script
          if [ -f "services/${{ inputs.service }}/logs.sh" ]; then
            echo "📋 Running custom logs script..."
            chmod +x "services/${{ inputs.service }}/logs.sh"
            cd "services/${{ inputs.service }}"
            ./logs.sh "${{ inputs.environment }}"
          elif [ -f "scripts/logs.sh" ]; then
            echo "📋 Running global logs script..."
            chmod +x scripts/logs.sh
            ./scripts/logs.sh "${{ inputs.service }}" "${{ inputs.environment }}"
          else
            echo "📋 Fetching available logs..."
            
            # Look for log files
            LOG_DIR="services/${{ inputs.service }}/logs"
            if [ -d "$LOG_DIR" ]; then
              echo "📂 Log directory found: $LOG_DIR"
              echo "📄 Available log files:"
              ls -la "$LOG_DIR"
              
              # Show recent logs from the most recent file
              LATEST_LOG=$(ls -t "$LOG_DIR"/*.log 2>/dev/null | head -1)
              if [ -n "$LATEST_LOG" ]; then
                echo "📖 Recent entries from: $LATEST_LOG"
                echo "----------------------------------------"
                tail -50 "$LATEST_LOG" || echo "Could not read log file"
                echo "----------------------------------------"
              fi
            else
              echo "📄 Showing recent workflow logs for this service..."
              echo "----------------------------------------"
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) [INFO] Service: ${{ inputs.service }}"
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) [INFO] Environment: ${{ inputs.environment }}"
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) [INFO] Job ID: ${{ inputs.job_id }}"
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) [INFO] Workflow Run: ${{ github.run_id }}"
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) [INFO] Requested by: ${{ inputs.user_id }}"
              echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) [INFO] Log fetch completed successfully"
              echo "----------------------------------------"
            fi
          fi
          
          echo "✅ Log fetch for ${{ inputs.service }} completed successfully!"

      # ===== STATUS ACTION =====
      - name: Check service status
        if: inputs.action == 'status'
        run: |
          if [ -n "${{ inputs.service }}" ]; then
            echo "📊 Checking status for ${{ inputs.service }} in ${{ inputs.environment }} environment"
            SERVICE_DIR="services/${{ inputs.service }}"
          else
            echo "📊 Checking overall status for ${{ inputs.environment }} environment"
            SERVICE_DIR="services"
          fi
          
          # Check for custom status script
          if [ -n "${{ inputs.service }}" ] && [ -f "services/${{ inputs.service }}/status.sh" ]; then
            echo "📋 Running custom status script..."
            chmod +x "services/${{ inputs.service }}/status.sh"
            cd "services/${{ inputs.service }}"
            ./status.sh "${{ inputs.environment }}"
          elif [ -f "scripts/status.sh" ]; then
            echo "📋 Running global status script..."
            chmod +x scripts/status.sh
            ./scripts/status.sh "${{ inputs.service }}" "${{ inputs.environment }}"
          else
            echo "📋 Performing status check..."
            
            if [ -n "${{ inputs.service }}" ]; then
              # Single service status
              echo "🔍 Service Information:"
              echo "  Name: ${{ inputs.service }}"
              echo "  Environment: ${{ inputs.environment }}"
              echo "  Directory: $SERVICE_DIR"
              echo "  Exists: $([ -d "$SERVICE_DIR" ] && echo "✅ Yes" || echo "❌ No")"
              
              if [ -d "$SERVICE_DIR" ]; then
                echo ""
                echo "📁 Service Contents:"
                ls -la "$SERVICE_DIR"
                
                # Check for common files
                echo ""
                echo "🔧 Configuration:"
                [ -f "$SERVICE_DIR/package.json" ] && echo "  📦 Node.js: ✅" || echo "  📦 Node.js: ❌"
                [ -f "$SERVICE_DIR/Dockerfile" ] && echo "  🐳 Docker: ✅" || echo "  🐳 Docker: ❌"
                [ -f "$SERVICE_DIR/requirements.txt" ] && echo "  🐍 Python: ✅" || echo "  🐍 Python: ❌"
                [ -f "$SERVICE_DIR/go.mod" ] && echo "  🐹 Go: ✅" || echo "  🐹 Go: ❌"
                
                # Recent activity
                echo ""
                echo "📅 Last Modified: $(stat -c %y "$SERVICE_DIR" 2>/dev/null || echo "Unknown")"
              fi
            else
              # Overall status
              echo "🏢 Repository Status:"
              echo "  Repository: ${{ github.repository }}"
              echo "  Branch: ${{ github.ref_name }}"
              echo "  SHA: ${{ github.sha }}"
              echo "  Environment: ${{ inputs.environment }}"
              
              echo ""
              echo "📁 Available Services:"
              if [ -d "services" ]; then
                ls -la services/
                
                echo ""
                echo "📊 Service Summary:"
                SERVICE_COUNT=$(ls -1d services/*/ 2>/dev/null | wc -l)
                echo "  Total services: $SERVICE_COUNT"
                
                for service in services/*/; do
                  if [ -d "$service" ]; then
                    service_name=$(basename "$service")
                    echo "  - $service_name: $([ -f "$service/package.json" ] && echo "Node.js" || [ -f "$service/Dockerfile" ] && echo "Docker" || echo "Unknown")"
                  fi
                done
              else
                echo "  ❌ No services directory found"
              fi
              
              echo ""
              echo "⚡ Workflow Status:"
              echo "  Run ID: ${{ github.run_id }}"
              echo "  Run Number: ${{ github.run_number }}"
              echo "  Job: ${{ github.job }}"
              echo "  Actor: ${{ github.actor }}"
            fi
          fi
          
          echo "✅ Status check completed successfully!"

      # ===== SUMMARY =====
      - name: Job completion summary
        if: always()
        run: |
          echo ""
          echo "🎯 DevCommandHub Job Summary"
          echo "============================"
          echo "Job ID: ${{ inputs.job_id }}"
          echo "Action: ${{ inputs.action }}"
          echo "Service: ${{ inputs.service }}"
          echo "Environment: ${{ inputs.environment }}"
          echo "Status: ${{ job.status }}"
          echo "Duration: ${{ steps.*.outcome }}"
          echo "Repository: ${{ github.repository }}"
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Operation completed successfully!"
          else
            echo "❌ Operation failed - check logs above for details"
          fi